// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  idUsuario      String      @id @default(uuid())
  usuario        String   @unique
  correo         String   @unique
  password       String
  fechaRegistro  DateTime @default(now())
  @@map("usuario")
}

model Categoria {
  idCategoria     Int      @id @default(autoincrement())
  nombre          String
  descripcion     String
  niveles         Nivel[]  // Relación con los niveles
  ejercicios    Ejercicio[] // Relación con los ejercicios
  @@map("categoria")
}

model Nivel {
  idNivel       Int       @id @default(autoincrement())
  idCategoria   Int       // Relación con la tabla Categoria
  categoria     String
  nivel         Int
  categoriaRel  Categoria @relation(fields: [idCategoria], references: [idCategoria]) // Relación con la categoría
  ejercicios    Ejercicio[] // Relación con los ejercicios
  @@map("nivel")
}

model Ejercicio {
  idEjercicio        Int       @id @default(autoincrement())
  idNivel            Int
  idCategoria        Int
  pregunta           String
  respuestaCorrecta  String
  opciones           String

  nivel              Nivel     @relation(fields: [idNivel], references: [idNivel])
  Categoria          Categoria @relation(fields: [idCategoria], references: [idCategoria])

  @@map("ejercicio")
}

model LogroRecompensa {
  idRecompensa    Int      @id @default(autoincrement())
  nombre          String
  descripcion     String
  puntos          Int
  @@map("logro_recompensa")
}


model Progreso {
  idProgreso       Int     @id @default(autoincrement())
  idUsuario        String                                  
  idNivel          Int
  completado       Boolean @default(false)  // Si el nivel ha sido completado
  respuestasCorrectas Int // Número de respuestas correctas en este nivel
  totalRespuestas   Int    // Total de respuestas del nivel
  nivelDesbloqueado Boolean @default(false) // Si el siguiente nivel ha sido desbloqueado
  @@map("progreso")
}


model Respuesta {
  idRespuesta   Int     @id @default(autoincrement())
  idUsuario     String
  idEjercicio   Int
  idNivel       Int
  idCategoria   String  
  esCorrecta    Boolean

  @@map("respuesta")
}



model UsuarioLogro {
  idLogro         Int      @id @default(autoincrement())
  idUsuario       String                                  
  idRecompensa    Int
  fechaObtenido   DateTime @default(now())
  @@map("usuario_logro")
}
